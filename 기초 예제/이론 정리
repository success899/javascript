객체
:   데이터가 추가되면 배열 전체에서 중복되지 않는 인덱스가 자동으로 만들어져서 추가된 데이터에 대한 식별자가 된다.
    이 인덱스를 이용해서 데이터를 가져오게 되는 것이다.
    만약 인덱스로 문자를 사용하고 싶다면 객체(dictionary)를 사용해야 한다.
    다른 언어에서는 연관배열(associative array) 또는 맵( map), 딕셔너리(Dictionary)라는 데이터 타입이 객체에 해당한다.


모듈
:   프로그램은 작고 단순한 것에서 크고 복잡한 것으로 진화한다.
    그 과정에서 코드의 재활용성을 높이고, 유지보수를 쉽게 할 수 있는 다양한 기법들이 사용된다.
    그 중의 하나가 코드를 여러개의 파일로 분리하는 것이다.

    순수한 자바스크립트에서는 모듈(module)이라는 개념이 분명하게 존재하지는 않는다.
    하지만 자바스크립트가 구동되는 호스트 환경에 따라서 서로 다른 모듈화 방법이 제공되고 있다. 

    기대효과
    :   자주 사용되는 코드를 별도의 파일로 만들어서 필요할 때마다 재활용할 수 있다.
        코드를 개선하면 이를 사용하고 있는 모든 애플리케이션의 동작이 개선된다.
        코드 수정 시에 필요한 로직을 빠르게 찾을 수 있다.
        필요한 로직만을 로드해서 메모리의 낭비를 줄일 수 있다.
        한번 다운로드된 모듈은 웹브라우저에 의해서 저장되기 때문에 동일한 로직을 로드 할 때 시간과 네트워크 트래픽을 절약 할 수 있다. (브라우저에서만 해당)


라이브러리
:   모듈이 프로그램을 구성하는 작은 부품으로서의 로직을 의미한다면 라이브러리는 자주 사용되는 로직을 재사용하기 편리하도록 잘 정리한 일련의 코드들의 집합을 의미한다고 할 수 있다.



모듈과 라이브러리 차이
:   모듈이 프로그램의 작은 부품이라 하면,
    라이브러리는 자주 사용되는 부품을 재사용하기 편하게 잘 정리한 코드의 집합.
    특히 라이브러리는 많은사람들의 노력과 돈, 노우하우를 집중해 만들어 놓아 아주 완성도가 높다.


라이브러리를 쓰는 이유
:   자기혼자서 만드는 것이 여러가지 이유로 필연적이지 않으면,
    다른사람이 이미 만들어 놓은것을 부품으로 조립해서 만들어 가는것이 소프트웨어를 만드는 기본중의 기본 이다.


클로저
:   외부 함수에 접근할 수 있는 내부 함수 혹은 이러한 원리를 일컫는 용어
    범위(scope)에 따라서 내부함수의 범위에서는 외부 함수 범위에 있는 변수에 접근이 가능하지만 그 반대는 실현이 불가능하다는 개념이다.
    즉 클로저란 내부함수가 외부함수의 지역변수에 접근 할 수 있고, 외부함수는 외부함수의 지역변수를 사용하는 내부함수가 소멸될 때까지 소멸되지 않는 특성을 의미한다.


객체지향 프로그래밍(OOP - Object-Oriented Programming)
:   좀 더 나은 프로그램을 만들기 위한 프로그래밍 패러다임으로 로직을 상태(state)와 행위(behave)로 이루어진 객체로 만드는 것이다.
    이 객체들을 마치 레고 블럭처럼 조립해서 하나의 프로그램을 만드는 것이 객체지향 프로그래밍이라고 할 수 있다.
    다시 말해서 객체지향 프로그래밍은 객체를 만드는 것이다.

    객체 또는 오브젝트(object)는 클래스에서 정의한 것을 토대로 메모리(실제 저장공간)에 할당된 것으로 프로그램에서 사용되는 데이터
    또는 식별자에 의해 참조되는 공간을 의미하며,변수, 자료 구조, 함수 또는 메소드가 될 수 있다.

    추상화(Abstraciton)
    :   공통의 속성이나 기능을 묶어 이름을 붙이는 것
        객체 지향적 관점에서 클래스를 정의하는 것을 바로 추상화
    캡슐화(Encapsulation)
    :   실제로 구현되는 부분을 외부에 드러나지 않도록 캡슐로 감싸 이용방법만을 알려주는 것
        데이터 구조와 데이터를 다루는 방법들을 결합 시켜 묶는 것. 다시 한번 말하자면 변수와 함수를 하나로 묶는것을 말한다.
    은닉화 (hiding)
    :   은닉이란 내부 데이터, 내부 연산을 외부에서 접근하지 못하도록 은닉(hiding) 혹은 격리(isolation)시키는 것
    상속성, 재사용(Inheritance)
    :   상위 개념의 특징을 하위 개념이 물려받는 것
    다형성(Polymorphism)
    :   부모클레스에서 물려받은 가상 함수를 자식 클래스 내에서 오버라이딩 되어 사용되는 것

    
자바스크립트 생성자의 특징
:   일반적인 객체지향 언어에서 생성자는 클래스의 소속이다. 하지만 자바스크립트에서 객체를 만드는 주체는 함수다.
    함수에 new를 붙이는 것을 통해서 객체를 만들 수 있다는 점은 자바스크립트에서 함수의 위상을 암시하는 단서이면서 또 자바스크립트가 추구하는 자유로움을 보여주는 사례라고 할 수 있다.